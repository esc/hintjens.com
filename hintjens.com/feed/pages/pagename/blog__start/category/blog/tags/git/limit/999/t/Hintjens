<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:wikidot="http://www.wikidot.com/rss-namespace">

	<channel>
		<title>Hintjens</title>
		<link>http://hintjens.com</link>
		<description></description>
				<copyright></copyright>
		<lastBuildDate>Wed, 09 Oct 2019 09:32:52 +0000</lastBuildDate>
		
					<item>
				<guid>http://hintjens.com/blog:24</guid>
				<title>Git Branches Considered Harmful</title>
				<link>http://hintjens.com/blog:24</link>
				<description>

&lt;p&gt;One of git&#039;s great features is how easy it makes branches. Almost all git projects use branches, and the selection of the &amp;quot;best&amp;quot; branching strategy is like a rite of passage for an open source project. Vincent Driessen&#039;s git-flow is maybe the best known. It has &#039;base&#039; branches (master, develop), &#039;feature&#039; branches, &#039;release&#039; branches, &#039;hotfix&#039; branches, and &#039;support&#039; branches. Many teams have adopted git-flow, which even has git extensions to support it. However, in this article I&#039;ll argue that public git branches are harmful, based on experience and evidence, and propose a branch-free approach, based on forks.&lt;/p&gt;
&lt;p&gt;by &lt;span class=&quot;printuser avatarhover&quot;&gt;&lt;a href=&quot;http://www.wikidot.com/user:info/pieterh&quot;  &gt;&lt;img class=&quot;small&quot; src=&quot;http://www.wikidot.com/avatar.php?userid=99&amp;amp;amp;size=small&amp;amp;amp;timestamp=1570613572&quot; alt=&quot;pieterh&quot; style=&quot;background-image:url(http://www.wikidot.com/userkarma.php?u=99)&quot; /&gt;&lt;/a&gt;&lt;a href=&quot;http://www.wikidot.com/user:info/pieterh&quot;  &gt;pieterh&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
</description>
				<pubDate>Wed, 09 May 2012 21:49:47 +0000</pubDate>
												<content:encoded>
					<![CDATA[
						 <p>One of git's great features is how easy it makes branches. Almost all git projects use branches, and the selection of the &quot;best&quot; branching strategy is like a rite of passage for an open source project. Vincent Driessen's git-flow is maybe the best known. It has 'base' branches (master, develop), 'feature' branches, 'release' branches, 'hotfix' branches, and 'support' branches. Many teams have adopted git-flow, which even has git extensions to support it. However, in this article I'll argue that public git branches are harmful, based on experience and evidence, and propose a branch-free approach, based on forks.</p> <h2><span>Background</span></h2> <p>Let me start with my credentials. My first open source project was <a href="http://legacy.imatix.com/html/libero/">Libero</a> from 1991. I wrote <a href="http://en.wikipedia.org/wiki/Xitami">Xitami</a>, a popular open source web server, and killed that in 2001. I wrote most of <a href="http://www.openamq.org">OpenAMQ</a>, the first AMQP implementation. I founded and steered the ZeroMQ community and have maintained its stable releases for years. If there is one thing I know really well, it's how to build excellent software.</p> <p>Git is a revolution, especially when combined with github. In the last year or two, the github/git combination has become a key tool for organizing teams, and building processes like <a href="http://rfc.zeromq.org/spec:16">C4</a> and <a href="http://unprotocols.org/blog:23">PC3</a> that are (as far as I know) the first reusable contracts of their kind.</p> <p>Here is a section of PC3 that will shock some people:</p> <blockquote> <ul> <li>The project SHALL have one branch (&quot;master&quot;) that always holds the latest in-progress version and SHOULD always build.</li> <li>The project SHALL NOT use topic branches for any reason. Personal forks MAY use topic branches.</li> <li>To make a stable release someone SHALL fork the repository by copying it and thus become maintainer of this repository.</li> </ul> </blockquote> <p>To be clear, it's <em>public branches in shared repositories</em> that I'm talking about. Using branches for private work, e.g. to work on different issues, appears to work just fine.</p> <p>The PC3 text is not accidental. This section came from trial-and-error, mainly in the ZeroMQ community. Originally, when Martin Sustrik and I (the pragmatic core developers) started using forks instead of branches for ZeroMQ's stable versions, many people reacted with shock and horror. Today, people have less emotional response. Tomorrow, I think it'll be clear that branches were, in fact, an entirely wrong approach inherited from the days of Subversion and monolithic repositories.</p> <p>More profoundly, the branches vs. forks argument is really a wider design vs. evolve argument about how to make software optimally (both PC3 and C4 fully embrace the &quot;evolve&quot; approach). I may address that wider argument in a future article.</p> <p>To make my argument here, I'll look at a number of criteria, and compare branches and forks in each one.</p> <h2><span>Complexity</span></h2> <p>The simpler, the better.</p> <p>There is no inherent reason branches are more complex than forks. However, git-flow uses five <em>types</em> of branch, whereas PC3 uses two types of fork (development, and stable) and one branch (master). Circumstantial evidence is that branches lead to more complexity than forks. For naive users, it is definitely easier to learn to work with many repositories and no branches.</p> <h2><span>Learning Curve</span></h2> <p>The smoother the learning curve, the better.</p> <p>Evidence definitely shows that learning to use git branches is complex. For some people this is OK. For most developers, every cycle spent learning git is a cycle lost on more productive things. I've been told several times, by different people, that I do not like branches because I &quot;never properly learned git&quot;. That is fair but it is a criticism of the tool, not the human.</p> <h2><span>Cost of Failure</span></h2> <p>The lower the cost of failure, the better.</p> <p>Branches demand more perfection from developers since mistakes potentially affect others. This raises the cost of failure. Forks make failure extremely cheap since nothing that happens in a fork can affect others not using that fork.</p> <h2><span>Upfront Coordination</span></h2> <p>The less need for upfront coordination, the better.</p> <p>You can do a hostile fork. You cannot do a hostile branch. Branches depend on upfront coordination, which is expensive and fragile. One person can veto the desires of a whole group. In the ZeroMQ community for example we were unable to agree on a git branching model for a year. We solved that by using forking instead. The problem went away.</p> <h2><span>Scalability</span></h2> <p>The more you can scale a project, the better.</p> <p>The strong assumption in all branch strategies is that the repository <em>is</em> the project. But there is a limit to how many people you can get in agreement to work together in one repository. As I explained, the cost of upfront coordination can become fatal. A more realistic project scales by allowing anyone to start their own repositories, and ensuring these can work together. A project like ZeroMQ has dozens of repositories. Forking looks more scalable than branching.</p> <h2><span>Surprise and Expectations</span></h2> <p>The less surprising, the better.</p> <p>People expect branches and find forks to be uncommon and thus confusing. This is the one aspect where branches win. However, it's also a reason for sticking to FORTRAN and COBOL. We do not refuse innovation just because it's surprising.</p> <h2><span>Economics of Participation</span></h2> <p>The more tangible the rewards, the better.</p> <p>A fully free process like PC3/C4 lets people organize around problems. Most organizations are not ready for such a radical management approach. But even a top-down approach needs people to feel rewarded for their work. Branches don't act like &quot;product&quot; but like &quot;discrete variations of product&quot;. People have less interest in contributing to a discrete variation. Whereas everyone wants their name on a successful product. So the economics of branches are worse than the economics of forks.</p> <h2><span>Robustness in Conflict</span></h2> <p>The more a model can survive conflict, the better.</p> <p>Like it or not, people fight over ego, status, belief. If your organizational model depends on agreement, you won't survive the first real fight. Branches do not survive real arguments and fights. Whereas forks can be hostile, and still benefit all parties. And this is indeed how free software works. Score one for forks, zero for braches.</p> <h2><span>Guarantees of Isolation</span></h2> <p>The stronger the isolation between production code and experiment, the better.</p> <p>People make mistakes. I've seen experimental code pushed to mainline production by error. I've seen people make bad panic changes under stress. But the real fault is in allowing two entirely separate generations of product to exist in the same protected space. If you can push to random-branch-x you can push to master. Branches do not guarantee isolation of production critical code. Forks do.</p> <h2><span>Visibility</span></h2> <p>The more visible our work, the better.</p> <p>Forks have watchers, issues, a README, a wiki. Branches have none of these. People try forks, build them, break them, patch them. Forks sit there until someone remembers to work on them. Forks have downloads and tarballs. Branches do not. When we look for self-organization, the more visible and declarative the problems, the faster and more accurately we can work.</p> <h2><span>Conclusions</span></h2> <p>Git branches are, in my experience and in shared repositories, harmful. It is better to work with a branch-free process that uses forks for stabilization. This comes from some years of trial and error on a wide range of projects. We have systematically found forks to be cheaper and safer and easier than branches. Branch-free processes like C4 and PC3 are real, and they work, in anger, both on closed source and open source projects. The only downside of a branch-free process seems to be that it shocks people with previous git experience. This is a passing effect, in our experience.</p> <p>by <span class="printuser avatarhover"><a href="http://www.wikidot.com/user:info/pieterh" ><img class="small" src="http://www.wikidot.com/avatar.php?userid=99&amp;amp;size=small&amp;amp;timestamp=1570613572" alt="pieterh" style="background-image:url(http://www.wikidot.com/userkarma.php?u=99)" /></a><a href="http://www.wikidot.com/user:info/pieterh" >pieterh</a></span></p> 
				 	]]>
				</content:encoded>							</item>
				</channel>
</rss>